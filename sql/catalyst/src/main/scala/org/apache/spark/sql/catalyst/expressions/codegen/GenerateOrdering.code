      public SpecificOrdering generate(Object[] references) {
        return new SpecificOrdering(references);
      }

      class SpecificOrdering extends org.apache.spark.sql.catalyst.expressions.codegen.BaseOrdering {

        private Object[] references;



        public SpecificOrdering(Object[] references) {
          this.references = references;

        }

        public int compare(InternalRow a, InternalRow b) {
          InternalRow i = null;  // Holds current row being evaluated.

          i = a;
          boolean isNullA2;
          UTF8String primitiveA3;
          {
            /* input[0, string] */
boolean isNull0 = i.isNullAt(0);
        UTF8String value1 = isNull0 ? null : (i.getUTF8String(0));
            isNullA2 = isNull0;
            primitiveA3 = value1;
          }
          i = b;
          boolean isNullB4;
          UTF8String primitiveB5;
          {
            /* input[0, string] */
boolean isNull0 = i.isNullAt(0);
        UTF8String value1 = isNull0 ? null : (i.getUTF8String(0));
            isNullB4 = isNull0;
            primitiveB5 = value1;
          }
          if (isNullA2 && isNullB4) {
            // Nothing
          } else if (isNullA2) {
            return -1;
          } else if (isNullB4) {
            return 1;
          } else {
            int comp = primitiveA3.compare(primitiveB5);
            if (comp != 0) {
              return comp;
            }
          }

          return 0;
        }
      }